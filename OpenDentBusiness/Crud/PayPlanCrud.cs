//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class PayPlanCrud {
		///<summary>Gets one PayPlan object from the database using the primary key.  Returns null if not found.</summary>
		public static PayPlan SelectOne(long payPlanNum){
			string command="SELECT * FROM payplan "
				+"WHERE PayPlanNum = "+POut.Long(payPlanNum);
			List<PayPlan> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one PayPlan object from the database using a query.</summary>
		public static PayPlan SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<PayPlan> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of PayPlan objects from the database using a query.</summary>
		public static List<PayPlan> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<PayPlan> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<PayPlan> TableToList(DataTable table){
			List<PayPlan> retVal=new List<PayPlan>();
			PayPlan payPlan;
			foreach(DataRow row in table.Rows) {
				payPlan=new PayPlan();
				payPlan.PayPlanNum      = PIn.Long  (row["PayPlanNum"].ToString());
				payPlan.PatNum          = PIn.Long  (row["PatNum"].ToString());
				payPlan.Guarantor       = PIn.Long  (row["Guarantor"].ToString());
				payPlan.PayPlanDate     = PIn.Date  (row["PayPlanDate"].ToString());
				payPlan.APR             = PIn.Double(row["APR"].ToString());
				payPlan.Note            = PIn.String(row["Note"].ToString());
				payPlan.PlanNum         = PIn.Long  (row["PlanNum"].ToString());
				payPlan.CompletedAmt    = PIn.Double(row["CompletedAmt"].ToString());
				payPlan.InsSubNum       = PIn.Long  (row["InsSubNum"].ToString());
				payPlan.PaySchedule     = (OpenDentBusiness.PaymentSchedule)PIn.Int(row["PaySchedule"].ToString());
				payPlan.NumberOfPayments= PIn.Int   (row["NumberOfPayments"].ToString());
				payPlan.PayAmt          = PIn.Double(row["PayAmt"].ToString());
				payPlan.DownPayment     = PIn.Double(row["DownPayment"].ToString());
				retVal.Add(payPlan);
			}
			return retVal;
		}

		///<summary>Inserts one PayPlan into the database.  Returns the new priKey.</summary>
		public static long Insert(PayPlan payPlan){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				payPlan.PayPlanNum=DbHelper.GetNextOracleKey("payplan","PayPlanNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(payPlan,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							payPlan.PayPlanNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(payPlan,false);
			}
		}

		///<summary>Inserts one PayPlan into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(PayPlan payPlan,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				payPlan.PayPlanNum=ReplicationServers.GetKey("payplan","PayPlanNum");
			}
			string command="INSERT INTO payplan (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="PayPlanNum,";
			}
			command+="PatNum,Guarantor,PayPlanDate,APR,Note,PlanNum,CompletedAmt,InsSubNum,PaySchedule,NumberOfPayments,PayAmt,DownPayment) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(payPlan.PayPlanNum)+",";
			}
			command+=
				     POut.Long  (payPlan.PatNum)+","
				+    POut.Long  (payPlan.Guarantor)+","
				+    POut.Date  (payPlan.PayPlanDate)+","
				+"'"+POut.Double(payPlan.APR)+"',"
				+"'"+POut.String(payPlan.Note)+"',"
				+    POut.Long  (payPlan.PlanNum)+","
				+"'"+POut.Double(payPlan.CompletedAmt)+"',"
				+    POut.Long  (payPlan.InsSubNum)+","
				+    POut.Int   ((int)payPlan.PaySchedule)+","
				+    POut.Int   (payPlan.NumberOfPayments)+","
				+"'"+POut.Double(payPlan.PayAmt)+"',"
				+"'"+POut.Double(payPlan.DownPayment)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				payPlan.PayPlanNum=Db.NonQ(command,true);
			}
			return payPlan.PayPlanNum;
		}

		///<summary>Inserts one PayPlan into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(PayPlan payPlan){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(payPlan,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					payPlan.PayPlanNum=DbHelper.GetNextOracleKey("payplan","PayPlanNum"); //Cacheless method
				}
				return InsertNoCache(payPlan,true);
			}
		}

		///<summary>Inserts one PayPlan into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(PayPlan payPlan,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO payplan (";
			if(!useExistingPK && isRandomKeys) {
				payPlan.PayPlanNum=ReplicationServers.GetKeyNoCache("payplan","PayPlanNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="PayPlanNum,";
			}
			command+="PatNum,Guarantor,PayPlanDate,APR,Note,PlanNum,CompletedAmt,InsSubNum,PaySchedule,NumberOfPayments,PayAmt,DownPayment) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(payPlan.PayPlanNum)+",";
			}
			command+=
				     POut.Long  (payPlan.PatNum)+","
				+    POut.Long  (payPlan.Guarantor)+","
				+    POut.Date  (payPlan.PayPlanDate)+","
				+"'"+POut.Double(payPlan.APR)+"',"
				+"'"+POut.String(payPlan.Note)+"',"
				+    POut.Long  (payPlan.PlanNum)+","
				+"'"+POut.Double(payPlan.CompletedAmt)+"',"
				+    POut.Long  (payPlan.InsSubNum)+","
				+    POut.Int   ((int)payPlan.PaySchedule)+","
				+    POut.Int   (payPlan.NumberOfPayments)+","
				+"'"+POut.Double(payPlan.PayAmt)+"',"
				+"'"+POut.Double(payPlan.DownPayment)+"')";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				payPlan.PayPlanNum=Db.NonQ(command,true);
			}
			return payPlan.PayPlanNum;
		}

		///<summary>Updates one PayPlan in the database.</summary>
		public static void Update(PayPlan payPlan){
			string command="UPDATE payplan SET "
				+"PatNum          =  "+POut.Long  (payPlan.PatNum)+", "
				+"Guarantor       =  "+POut.Long  (payPlan.Guarantor)+", "
				+"PayPlanDate     =  "+POut.Date  (payPlan.PayPlanDate)+", "
				+"APR             = '"+POut.Double(payPlan.APR)+"', "
				+"Note            = '"+POut.String(payPlan.Note)+"', "
				+"PlanNum         =  "+POut.Long  (payPlan.PlanNum)+", "
				+"CompletedAmt    = '"+POut.Double(payPlan.CompletedAmt)+"', "
				+"InsSubNum       =  "+POut.Long  (payPlan.InsSubNum)+", "
				+"PaySchedule     =  "+POut.Int   ((int)payPlan.PaySchedule)+", "
				+"NumberOfPayments=  "+POut.Int   (payPlan.NumberOfPayments)+", "
				+"PayAmt          = '"+POut.Double(payPlan.PayAmt)+"', "
				+"DownPayment     = '"+POut.Double(payPlan.DownPayment)+"' "
				+"WHERE PayPlanNum = "+POut.Long(payPlan.PayPlanNum);
			Db.NonQ(command);
		}

		///<summary>Updates one PayPlan in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(PayPlan payPlan,PayPlan oldPayPlan){
			string command="";
			if(payPlan.PatNum != oldPayPlan.PatNum) {
				if(command!=""){ command+=",";}
				command+="PatNum = "+POut.Long(payPlan.PatNum)+"";
			}
			if(payPlan.Guarantor != oldPayPlan.Guarantor) {
				if(command!=""){ command+=",";}
				command+="Guarantor = "+POut.Long(payPlan.Guarantor)+"";
			}
			if(payPlan.PayPlanDate != oldPayPlan.PayPlanDate) {
				if(command!=""){ command+=",";}
				command+="PayPlanDate = "+POut.Date(payPlan.PayPlanDate)+"";
			}
			if(payPlan.APR != oldPayPlan.APR) {
				if(command!=""){ command+=",";}
				command+="APR = '"+POut.Double(payPlan.APR)+"'";
			}
			if(payPlan.Note != oldPayPlan.Note) {
				if(command!=""){ command+=",";}
				command+="Note = '"+POut.String(payPlan.Note)+"'";
			}
			if(payPlan.PlanNum != oldPayPlan.PlanNum) {
				if(command!=""){ command+=",";}
				command+="PlanNum = "+POut.Long(payPlan.PlanNum)+"";
			}
			if(payPlan.CompletedAmt != oldPayPlan.CompletedAmt) {
				if(command!=""){ command+=",";}
				command+="CompletedAmt = '"+POut.Double(payPlan.CompletedAmt)+"'";
			}
			if(payPlan.InsSubNum != oldPayPlan.InsSubNum) {
				if(command!=""){ command+=",";}
				command+="InsSubNum = "+POut.Long(payPlan.InsSubNum)+"";
			}
			if(payPlan.PaySchedule != oldPayPlan.PaySchedule) {
				if(command!=""){ command+=",";}
				command+="PaySchedule = "+POut.Int   ((int)payPlan.PaySchedule)+"";
			}
			if(payPlan.NumberOfPayments != oldPayPlan.NumberOfPayments) {
				if(command!=""){ command+=",";}
				command+="NumberOfPayments = "+POut.Int(payPlan.NumberOfPayments)+"";
			}
			if(payPlan.PayAmt != oldPayPlan.PayAmt) {
				if(command!=""){ command+=",";}
				command+="PayAmt = '"+POut.Double(payPlan.PayAmt)+"'";
			}
			if(payPlan.DownPayment != oldPayPlan.DownPayment) {
				if(command!=""){ command+=",";}
				command+="DownPayment = '"+POut.Double(payPlan.DownPayment)+"'";
			}
			if(command==""){
				return false;
			}
			command="UPDATE payplan SET "+command
				+" WHERE PayPlanNum = "+POut.Long(payPlan.PayPlanNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(PayPlan,PayPlan) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(PayPlan payPlan,PayPlan oldPayPlan) {
			if(payPlan.PatNum != oldPayPlan.PatNum) {
				return true;
			}
			if(payPlan.Guarantor != oldPayPlan.Guarantor) {
				return true;
			}
			if(payPlan.PayPlanDate != oldPayPlan.PayPlanDate) {
				return true;
			}
			if(payPlan.APR != oldPayPlan.APR) {
				return true;
			}
			if(payPlan.Note != oldPayPlan.Note) {
				return true;
			}
			if(payPlan.PlanNum != oldPayPlan.PlanNum) {
				return true;
			}
			if(payPlan.CompletedAmt != oldPayPlan.CompletedAmt) {
				return true;
			}
			if(payPlan.InsSubNum != oldPayPlan.InsSubNum) {
				return true;
			}
			if(payPlan.PaySchedule != oldPayPlan.PaySchedule) {
				return true;
			}
			if(payPlan.NumberOfPayments != oldPayPlan.NumberOfPayments) {
				return true;
			}
			if(payPlan.PayAmt != oldPayPlan.PayAmt) {
				return true;
			}
			if(payPlan.DownPayment != oldPayPlan.DownPayment) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one PayPlan from the database.</summary>
		public static void Delete(long payPlanNum){
			string command="DELETE FROM payplan "
				+"WHERE PayPlanNum = "+POut.Long(payPlanNum);
			Db.NonQ(command);
		}

	}
}