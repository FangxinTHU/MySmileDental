//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class PatientNoteCrud {
		///<summary>Gets one PatientNote object from the database using the primary key.  Returns null if not found.</summary>
		public static PatientNote SelectOne(long patNum){
			string command="SELECT * FROM patientnote "
				+"WHERE PatNum = "+POut.Long(patNum);
			List<PatientNote> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one PatientNote object from the database using a query.</summary>
		public static PatientNote SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<PatientNote> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of PatientNote objects from the database using a query.</summary>
		public static List<PatientNote> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<PatientNote> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<PatientNote> TableToList(DataTable table){
			List<PatientNote> retVal=new List<PatientNote>();
			PatientNote patientNote;
			foreach(DataRow row in table.Rows) {
				patientNote=new PatientNote();
				patientNote.PatNum      = PIn.Long  (row["PatNum"].ToString());
				patientNote.FamFinancial= PIn.String(row["FamFinancial"].ToString());
				patientNote.ApptPhone   = PIn.String(row["ApptPhone"].ToString());
				patientNote.Medical     = PIn.String(row["Medical"].ToString());
				patientNote.Service     = PIn.String(row["Service"].ToString());
				patientNote.MedicalComp = PIn.String(row["MedicalComp"].ToString());
				patientNote.Treatment   = PIn.String(row["Treatment"].ToString());
				retVal.Add(patientNote);
			}
			return retVal;
		}

		///<summary>Inserts one PatientNote into the database.  Returns the new priKey.</summary>
		public static long Insert(PatientNote patientNote){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				patientNote.PatNum=DbHelper.GetNextOracleKey("patientnote","PatNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(patientNote,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							patientNote.PatNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(patientNote,false);
			}
		}

		///<summary>Inserts one PatientNote into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(PatientNote patientNote,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				patientNote.PatNum=ReplicationServers.GetKey("patientnote","PatNum");
			}
			string command="INSERT INTO patientnote (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="PatNum,";
			}
			command+="FamFinancial,ApptPhone,Medical,Service,MedicalComp,Treatment) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(patientNote.PatNum)+",";
			}
			command+=
				 "'"+POut.String(patientNote.FamFinancial)+"',"
				+"'"+POut.String(patientNote.ApptPhone)+"',"
				+"'"+POut.String(patientNote.Medical)+"',"
				+"'"+POut.String(patientNote.Service)+"',"
				+    DbHelper.ParamChar+"paramMedicalComp,"
				+"'"+POut.String(patientNote.Treatment)+"')";
			if(patientNote.MedicalComp==null) {
				patientNote.MedicalComp="";
			}
			OdSqlParameter paramMedicalComp=new OdSqlParameter("paramMedicalComp",OdDbType.Text,patientNote.MedicalComp);
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command,paramMedicalComp);
			}
			else {
				patientNote.PatNum=Db.NonQ(command,true,paramMedicalComp);
			}
			return patientNote.PatNum;
		}

		///<summary>Inserts one PatientNote into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(PatientNote patientNote){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(patientNote,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					patientNote.PatNum=DbHelper.GetNextOracleKey("patientnote","PatNum"); //Cacheless method
				}
				return InsertNoCache(patientNote,true);
			}
		}

		///<summary>Inserts one PatientNote into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(PatientNote patientNote,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO patientnote (";
			if(!useExistingPK && isRandomKeys) {
				patientNote.PatNum=ReplicationServers.GetKeyNoCache("patientnote","PatNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="PatNum,";
			}
			command+="FamFinancial,ApptPhone,Medical,Service,MedicalComp,Treatment) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(patientNote.PatNum)+",";
			}
			command+=
				 "'"+POut.String(patientNote.FamFinancial)+"',"
				+"'"+POut.String(patientNote.ApptPhone)+"',"
				+"'"+POut.String(patientNote.Medical)+"',"
				+"'"+POut.String(patientNote.Service)+"',"
				+    DbHelper.ParamChar+"paramMedicalComp,"
				+"'"+POut.String(patientNote.Treatment)+"')";
			if(patientNote.MedicalComp==null) {
				patientNote.MedicalComp="";
			}
			OdSqlParameter paramMedicalComp=new OdSqlParameter("paramMedicalComp",OdDbType.Text,patientNote.MedicalComp);
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command,paramMedicalComp);
			}
			else {
				patientNote.PatNum=Db.NonQ(command,true,paramMedicalComp);
			}
			return patientNote.PatNum;
		}

		///<summary>Updates one PatientNote in the database.</summary>
		public static void Update(PatientNote patientNote){
			string command="UPDATE patientnote SET "
				//FamFinancial excluded from update
				+"ApptPhone   = '"+POut.String(patientNote.ApptPhone)+"', "
				+"Medical     = '"+POut.String(patientNote.Medical)+"', "
				+"Service     = '"+POut.String(patientNote.Service)+"', "
				+"MedicalComp =  "+DbHelper.ParamChar+"paramMedicalComp, "
				+"Treatment   = '"+POut.String(patientNote.Treatment)+"' "
				+"WHERE PatNum = "+POut.Long(patientNote.PatNum);
			if(patientNote.MedicalComp==null) {
				patientNote.MedicalComp="";
			}
			OdSqlParameter paramMedicalComp=new OdSqlParameter("paramMedicalComp",OdDbType.Text,patientNote.MedicalComp);
			Db.NonQ(command,paramMedicalComp);
		}

		///<summary>Updates one PatientNote in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(PatientNote patientNote,PatientNote oldPatientNote){
			string command="";
			//FamFinancial excluded from update
			if(patientNote.ApptPhone != oldPatientNote.ApptPhone) {
				if(command!=""){ command+=",";}
				command+="ApptPhone = '"+POut.String(patientNote.ApptPhone)+"'";
			}
			if(patientNote.Medical != oldPatientNote.Medical) {
				if(command!=""){ command+=",";}
				command+="Medical = '"+POut.String(patientNote.Medical)+"'";
			}
			if(patientNote.Service != oldPatientNote.Service) {
				if(command!=""){ command+=",";}
				command+="Service = '"+POut.String(patientNote.Service)+"'";
			}
			if(patientNote.MedicalComp != oldPatientNote.MedicalComp) {
				if(command!=""){ command+=",";}
				command+="MedicalComp = "+DbHelper.ParamChar+"paramMedicalComp";
			}
			if(patientNote.Treatment != oldPatientNote.Treatment) {
				if(command!=""){ command+=",";}
				command+="Treatment = '"+POut.String(patientNote.Treatment)+"'";
			}
			if(command==""){
				return false;
			}
			if(patientNote.MedicalComp==null) {
				patientNote.MedicalComp="";
			}
			OdSqlParameter paramMedicalComp=new OdSqlParameter("paramMedicalComp",OdDbType.Text,patientNote.MedicalComp);
			command="UPDATE patientnote SET "+command
				+" WHERE PatNum = "+POut.Long(patientNote.PatNum);
			Db.NonQ(command,paramMedicalComp);
			return true;
		}

		///<summary>Returns true if Update(PatientNote,PatientNote) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(PatientNote patientNote,PatientNote oldPatientNote) {
			//FamFinancial excluded from update
			if(patientNote.ApptPhone != oldPatientNote.ApptPhone) {
				return true;
			}
			if(patientNote.Medical != oldPatientNote.Medical) {
				return true;
			}
			if(patientNote.Service != oldPatientNote.Service) {
				return true;
			}
			if(patientNote.MedicalComp != oldPatientNote.MedicalComp) {
				return true;
			}
			if(patientNote.Treatment != oldPatientNote.Treatment) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one PatientNote from the database.</summary>
		public static void Delete(long patNum){
			string command="DELETE FROM patientnote "
				+"WHERE PatNum = "+POut.Long(patNum);
			Db.NonQ(command);
		}

	}
}