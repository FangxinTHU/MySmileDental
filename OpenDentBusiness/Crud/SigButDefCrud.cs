//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class SigButDefCrud {
		///<summary>Gets one SigButDef object from the database using the primary key.  Returns null if not found.</summary>
		public static SigButDef SelectOne(long sigButDefNum){
			string command="SELECT * FROM sigbutdef "
				+"WHERE SigButDefNum = "+POut.Long(sigButDefNum);
			List<SigButDef> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one SigButDef object from the database using a query.</summary>
		public static SigButDef SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<SigButDef> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of SigButDef objects from the database using a query.</summary>
		public static List<SigButDef> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<SigButDef> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<SigButDef> TableToList(DataTable table){
			List<SigButDef> retVal=new List<SigButDef>();
			SigButDef sigButDef;
			foreach(DataRow row in table.Rows) {
				sigButDef=new SigButDef();
				sigButDef.SigButDefNum= PIn.Long  (row["SigButDefNum"].ToString());
				sigButDef.ButtonText  = PIn.String(row["ButtonText"].ToString());
				sigButDef.ButtonIndex = PIn.Int   (row["ButtonIndex"].ToString());
				sigButDef.SynchIcon   = PIn.Byte  (row["SynchIcon"].ToString());
				sigButDef.ComputerName= PIn.String(row["ComputerName"].ToString());
				retVal.Add(sigButDef);
			}
			return retVal;
		}

		///<summary>Inserts one SigButDef into the database.  Returns the new priKey.</summary>
		public static long Insert(SigButDef sigButDef){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				sigButDef.SigButDefNum=DbHelper.GetNextOracleKey("sigbutdef","SigButDefNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(sigButDef,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							sigButDef.SigButDefNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(sigButDef,false);
			}
		}

		///<summary>Inserts one SigButDef into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(SigButDef sigButDef,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				sigButDef.SigButDefNum=ReplicationServers.GetKey("sigbutdef","SigButDefNum");
			}
			string command="INSERT INTO sigbutdef (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="SigButDefNum,";
			}
			command+="ButtonText,ButtonIndex,SynchIcon,ComputerName) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(sigButDef.SigButDefNum)+",";
			}
			command+=
				 "'"+POut.String(sigButDef.ButtonText)+"',"
				+    POut.Int   (sigButDef.ButtonIndex)+","
				+    POut.Byte  (sigButDef.SynchIcon)+","
				+"'"+POut.String(sigButDef.ComputerName)+"')";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				sigButDef.SigButDefNum=Db.NonQ(command,true);
			}
			return sigButDef.SigButDefNum;
		}

		///<summary>Inserts one SigButDef into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(SigButDef sigButDef){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(sigButDef,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					sigButDef.SigButDefNum=DbHelper.GetNextOracleKey("sigbutdef","SigButDefNum"); //Cacheless method
				}
				return InsertNoCache(sigButDef,true);
			}
		}

		///<summary>Inserts one SigButDef into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(SigButDef sigButDef,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO sigbutdef (";
			if(!useExistingPK && isRandomKeys) {
				sigButDef.SigButDefNum=ReplicationServers.GetKeyNoCache("sigbutdef","SigButDefNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="SigButDefNum,";
			}
			command+="ButtonText,ButtonIndex,SynchIcon,ComputerName) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(sigButDef.SigButDefNum)+",";
			}
			command+=
				 "'"+POut.String(sigButDef.ButtonText)+"',"
				+    POut.Int   (sigButDef.ButtonIndex)+","
				+    POut.Byte  (sigButDef.SynchIcon)+","
				+"'"+POut.String(sigButDef.ComputerName)+"')";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				sigButDef.SigButDefNum=Db.NonQ(command,true);
			}
			return sigButDef.SigButDefNum;
		}

		///<summary>Updates one SigButDef in the database.</summary>
		public static void Update(SigButDef sigButDef){
			string command="UPDATE sigbutdef SET "
				+"ButtonText  = '"+POut.String(sigButDef.ButtonText)+"', "
				+"ButtonIndex =  "+POut.Int   (sigButDef.ButtonIndex)+", "
				+"SynchIcon   =  "+POut.Byte  (sigButDef.SynchIcon)+", "
				+"ComputerName= '"+POut.String(sigButDef.ComputerName)+"' "
				+"WHERE SigButDefNum = "+POut.Long(sigButDef.SigButDefNum);
			Db.NonQ(command);
		}

		///<summary>Updates one SigButDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(SigButDef sigButDef,SigButDef oldSigButDef){
			string command="";
			if(sigButDef.ButtonText != oldSigButDef.ButtonText) {
				if(command!=""){ command+=",";}
				command+="ButtonText = '"+POut.String(sigButDef.ButtonText)+"'";
			}
			if(sigButDef.ButtonIndex != oldSigButDef.ButtonIndex) {
				if(command!=""){ command+=",";}
				command+="ButtonIndex = "+POut.Int(sigButDef.ButtonIndex)+"";
			}
			if(sigButDef.SynchIcon != oldSigButDef.SynchIcon) {
				if(command!=""){ command+=",";}
				command+="SynchIcon = "+POut.Byte(sigButDef.SynchIcon)+"";
			}
			if(sigButDef.ComputerName != oldSigButDef.ComputerName) {
				if(command!=""){ command+=",";}
				command+="ComputerName = '"+POut.String(sigButDef.ComputerName)+"'";
			}
			if(command==""){
				return false;
			}
			command="UPDATE sigbutdef SET "+command
				+" WHERE SigButDefNum = "+POut.Long(sigButDef.SigButDefNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(SigButDef,SigButDef) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(SigButDef sigButDef,SigButDef oldSigButDef) {
			if(sigButDef.ButtonText != oldSigButDef.ButtonText) {
				return true;
			}
			if(sigButDef.ButtonIndex != oldSigButDef.ButtonIndex) {
				return true;
			}
			if(sigButDef.SynchIcon != oldSigButDef.SynchIcon) {
				return true;
			}
			if(sigButDef.ComputerName != oldSigButDef.ComputerName) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one SigButDef from the database.</summary>
		public static void Delete(long sigButDefNum){
			string command="DELETE FROM sigbutdef "
				+"WHERE SigButDefNum = "+POut.Long(sigButDefNum);
			Db.NonQ(command);
		}

	}
}