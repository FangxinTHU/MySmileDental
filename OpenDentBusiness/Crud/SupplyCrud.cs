//This file is automatically generated.
//Do not attempt to make changes to this file because the changes will be erased and overwritten.
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;

namespace OpenDentBusiness.Crud{
	public class SupplyCrud {
		///<summary>Gets one Supply object from the database using the primary key.  Returns null if not found.</summary>
		public static Supply SelectOne(long supplyNum){
			string command="SELECT * FROM supply "
				+"WHERE SupplyNum = "+POut.Long(supplyNum);
			List<Supply> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets one Supply object from the database using a query.</summary>
		public static Supply SelectOne(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Supply> list=TableToList(Db.GetTable(command));
			if(list.Count==0) {
				return null;
			}
			return list[0];
		}

		///<summary>Gets a list of Supply objects from the database using a query.</summary>
		public static List<Supply> SelectMany(string command){
			if(RemotingClient.RemotingRole==RemotingRole.ClientWeb) {
				throw new ApplicationException("Not allowed to send sql directly.  Rewrite the calling class to not use this query:\r\n"+command);
			}
			List<Supply> list=TableToList(Db.GetTable(command));
			return list;
		}

		///<summary>Converts a DataTable to a list of objects.</summary>
		public static List<Supply> TableToList(DataTable table){
			List<Supply> retVal=new List<Supply>();
			Supply supply;
			foreach(DataRow row in table.Rows) {
				supply=new Supply();
				supply.SupplyNum       = PIn.Long  (row["SupplyNum"].ToString());
				supply.SupplierNum     = PIn.Long  (row["SupplierNum"].ToString());
				supply.CatalogNumber   = PIn.String(row["CatalogNumber"].ToString());
				supply.Descript        = PIn.String(row["Descript"].ToString());
				supply.Category        = PIn.Long  (row["Category"].ToString());
				supply.ItemOrder       = PIn.Int   (row["ItemOrder"].ToString());
				supply.LevelDesired    = PIn.Float (row["LevelDesired"].ToString());
				supply.IsHidden        = PIn.Bool  (row["IsHidden"].ToString());
				supply.Price           = PIn.Double(row["Price"].ToString());
				supply.BarCodeOrID     = PIn.String(row["BarCodeOrID"].ToString());
				supply.DispDefaultQuant= PIn.Float (row["DispDefaultQuant"].ToString());
				supply.DispUnitsCount  = PIn.Int   (row["DispUnitsCount"].ToString());
				supply.DispUnitDesc    = PIn.String(row["DispUnitDesc"].ToString());
				supply.LevelOnHand     = PIn.Float (row["LevelOnHand"].ToString());
				retVal.Add(supply);
			}
			return retVal;
		}

		///<summary>Inserts one Supply into the database.  Returns the new priKey.</summary>
		public static long Insert(Supply supply){
			if(DataConnection.DBtype==DatabaseType.Oracle) {
				supply.SupplyNum=DbHelper.GetNextOracleKey("supply","SupplyNum");
				int loopcount=0;
				while(loopcount<100){
					try {
						return Insert(supply,true);
					}
					catch(Oracle.DataAccess.Client.OracleException ex){
						if(ex.Number==1 && ex.Message.ToLower().Contains("unique constraint") && ex.Message.ToLower().Contains("violated")){
							supply.SupplyNum++;
							loopcount++;
						}
						else{
							throw ex;
						}
					}
				}
				throw new ApplicationException("Insert failed.  Could not generate primary key.");
			}
			else {
				return Insert(supply,false);
			}
		}

		///<summary>Inserts one Supply into the database.  Provides option to use the existing priKey.</summary>
		public static long Insert(Supply supply,bool useExistingPK){
			if(!useExistingPK && PrefC.RandomKeys) {
				supply.SupplyNum=ReplicationServers.GetKey("supply","SupplyNum");
			}
			string command="INSERT INTO supply (";
			if(useExistingPK || PrefC.RandomKeys) {
				command+="SupplyNum,";
			}
			command+="SupplierNum,CatalogNumber,Descript,Category,ItemOrder,LevelDesired,IsHidden,Price,BarCodeOrID,DispDefaultQuant,DispUnitsCount,DispUnitDesc,LevelOnHand) VALUES(";
			if(useExistingPK || PrefC.RandomKeys) {
				command+=POut.Long(supply.SupplyNum)+",";
			}
			command+=
				     POut.Long  (supply.SupplierNum)+","
				+"'"+POut.String(supply.CatalogNumber)+"',"
				+"'"+POut.String(supply.Descript)+"',"
				+    POut.Long  (supply.Category)+","
				+    POut.Int   (supply.ItemOrder)+","
				+    POut.Float (supply.LevelDesired)+","
				+    POut.Bool  (supply.IsHidden)+","
				+"'"+POut.Double(supply.Price)+"',"
				+"'"+POut.String(supply.BarCodeOrID)+"',"
				+    POut.Float (supply.DispDefaultQuant)+","
				+    POut.Int   (supply.DispUnitsCount)+","
				+"'"+POut.String(supply.DispUnitDesc)+"',"
				+    POut.Float (supply.LevelOnHand)+")";
			if(useExistingPK || PrefC.RandomKeys) {
				Db.NonQ(command);
			}
			else {
				supply.SupplyNum=Db.NonQ(command,true);
			}
			return supply.SupplyNum;
		}

		///<summary>Inserts one Supply into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(Supply supply){
			if(DataConnection.DBtype==DatabaseType.MySql) {
				return InsertNoCache(supply,false);
			}
			else {
				if(DataConnection.DBtype==DatabaseType.Oracle) {
					supply.SupplyNum=DbHelper.GetNextOracleKey("supply","SupplyNum"); //Cacheless method
				}
				return InsertNoCache(supply,true);
			}
		}

		///<summary>Inserts one Supply into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
		public static long InsertNoCache(Supply supply,bool useExistingPK){
			bool isRandomKeys=Prefs.GetBoolNoCache(PrefName.RandomPrimaryKeys);
			string command="INSERT INTO supply (";
			if(!useExistingPK && isRandomKeys) {
				supply.SupplyNum=ReplicationServers.GetKeyNoCache("supply","SupplyNum");
			}
			if(isRandomKeys || useExistingPK) {
				command+="SupplyNum,";
			}
			command+="SupplierNum,CatalogNumber,Descript,Category,ItemOrder,LevelDesired,IsHidden,Price,BarCodeOrID,DispDefaultQuant,DispUnitsCount,DispUnitDesc,LevelOnHand) VALUES(";
			if(isRandomKeys || useExistingPK) {
				command+=POut.Long(supply.SupplyNum)+",";
			}
			command+=
				     POut.Long  (supply.SupplierNum)+","
				+"'"+POut.String(supply.CatalogNumber)+"',"
				+"'"+POut.String(supply.Descript)+"',"
				+    POut.Long  (supply.Category)+","
				+    POut.Int   (supply.ItemOrder)+","
				+    POut.Float (supply.LevelDesired)+","
				+    POut.Bool  (supply.IsHidden)+","
				+"'"+POut.Double(supply.Price)+"',"
				+"'"+POut.String(supply.BarCodeOrID)+"',"
				+    POut.Float (supply.DispDefaultQuant)+","
				+    POut.Int   (supply.DispUnitsCount)+","
				+"'"+POut.String(supply.DispUnitDesc)+"',"
				+    POut.Float (supply.LevelOnHand)+")";
			if(useExistingPK || isRandomKeys) {
				Db.NonQ(command);
			}
			else {
				supply.SupplyNum=Db.NonQ(command,true);
			}
			return supply.SupplyNum;
		}

		///<summary>Updates one Supply in the database.</summary>
		public static void Update(Supply supply){
			string command="UPDATE supply SET "
				+"SupplierNum     =  "+POut.Long  (supply.SupplierNum)+", "
				+"CatalogNumber   = '"+POut.String(supply.CatalogNumber)+"', "
				+"Descript        = '"+POut.String(supply.Descript)+"', "
				+"Category        =  "+POut.Long  (supply.Category)+", "
				+"ItemOrder       =  "+POut.Int   (supply.ItemOrder)+", "
				+"LevelDesired    =  "+POut.Float (supply.LevelDesired)+", "
				+"IsHidden        =  "+POut.Bool  (supply.IsHidden)+", "
				+"Price           = '"+POut.Double(supply.Price)+"', "
				+"BarCodeOrID     = '"+POut.String(supply.BarCodeOrID)+"', "
				+"DispDefaultQuant=  "+POut.Float (supply.DispDefaultQuant)+", "
				+"DispUnitsCount  =  "+POut.Int   (supply.DispUnitsCount)+", "
				+"DispUnitDesc    = '"+POut.String(supply.DispUnitDesc)+"', "
				+"LevelOnHand     =  "+POut.Float (supply.LevelOnHand)+" "
				+"WHERE SupplyNum = "+POut.Long(supply.SupplyNum);
			Db.NonQ(command);
		}

		///<summary>Updates one Supply in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
		public static bool Update(Supply supply,Supply oldSupply){
			string command="";
			if(supply.SupplierNum != oldSupply.SupplierNum) {
				if(command!=""){ command+=",";}
				command+="SupplierNum = "+POut.Long(supply.SupplierNum)+"";
			}
			if(supply.CatalogNumber != oldSupply.CatalogNumber) {
				if(command!=""){ command+=",";}
				command+="CatalogNumber = '"+POut.String(supply.CatalogNumber)+"'";
			}
			if(supply.Descript != oldSupply.Descript) {
				if(command!=""){ command+=",";}
				command+="Descript = '"+POut.String(supply.Descript)+"'";
			}
			if(supply.Category != oldSupply.Category) {
				if(command!=""){ command+=",";}
				command+="Category = "+POut.Long(supply.Category)+"";
			}
			if(supply.ItemOrder != oldSupply.ItemOrder) {
				if(command!=""){ command+=",";}
				command+="ItemOrder = "+POut.Int(supply.ItemOrder)+"";
			}
			if(supply.LevelDesired != oldSupply.LevelDesired) {
				if(command!=""){ command+=",";}
				command+="LevelDesired = "+POut.Float(supply.LevelDesired)+"";
			}
			if(supply.IsHidden != oldSupply.IsHidden) {
				if(command!=""){ command+=",";}
				command+="IsHidden = "+POut.Bool(supply.IsHidden)+"";
			}
			if(supply.Price != oldSupply.Price) {
				if(command!=""){ command+=",";}
				command+="Price = '"+POut.Double(supply.Price)+"'";
			}
			if(supply.BarCodeOrID != oldSupply.BarCodeOrID) {
				if(command!=""){ command+=",";}
				command+="BarCodeOrID = '"+POut.String(supply.BarCodeOrID)+"'";
			}
			if(supply.DispDefaultQuant != oldSupply.DispDefaultQuant) {
				if(command!=""){ command+=",";}
				command+="DispDefaultQuant = "+POut.Float(supply.DispDefaultQuant)+"";
			}
			if(supply.DispUnitsCount != oldSupply.DispUnitsCount) {
				if(command!=""){ command+=",";}
				command+="DispUnitsCount = "+POut.Int(supply.DispUnitsCount)+"";
			}
			if(supply.DispUnitDesc != oldSupply.DispUnitDesc) {
				if(command!=""){ command+=",";}
				command+="DispUnitDesc = '"+POut.String(supply.DispUnitDesc)+"'";
			}
			if(supply.LevelOnHand != oldSupply.LevelOnHand) {
				if(command!=""){ command+=",";}
				command+="LevelOnHand = "+POut.Float(supply.LevelOnHand)+"";
			}
			if(command==""){
				return false;
			}
			command="UPDATE supply SET "+command
				+" WHERE SupplyNum = "+POut.Long(supply.SupplyNum);
			Db.NonQ(command);
			return true;
		}

		///<summary>Returns true if Update(Supply,Supply) would make changes to the database.
		///Does not make any changes to the database and can be called before remoting role is checked.</summary>
		public static bool UpdateComparison(Supply supply,Supply oldSupply) {
			if(supply.SupplierNum != oldSupply.SupplierNum) {
				return true;
			}
			if(supply.CatalogNumber != oldSupply.CatalogNumber) {
				return true;
			}
			if(supply.Descript != oldSupply.Descript) {
				return true;
			}
			if(supply.Category != oldSupply.Category) {
				return true;
			}
			if(supply.ItemOrder != oldSupply.ItemOrder) {
				return true;
			}
			if(supply.LevelDesired != oldSupply.LevelDesired) {
				return true;
			}
			if(supply.IsHidden != oldSupply.IsHidden) {
				return true;
			}
			if(supply.Price != oldSupply.Price) {
				return true;
			}
			if(supply.BarCodeOrID != oldSupply.BarCodeOrID) {
				return true;
			}
			if(supply.DispDefaultQuant != oldSupply.DispDefaultQuant) {
				return true;
			}
			if(supply.DispUnitsCount != oldSupply.DispUnitsCount) {
				return true;
			}
			if(supply.DispUnitDesc != oldSupply.DispUnitDesc) {
				return true;
			}
			if(supply.LevelOnHand != oldSupply.LevelOnHand) {
				return true;
			}
			return false;
		}

		///<summary>Deletes one Supply from the database.</summary>
		public static void Delete(long supplyNum){
			string command="DELETE FROM supply "
				+"WHERE SupplyNum = "+POut.Long(supplyNum);
			Db.NonQ(command);
		}

	}
}